#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define N 20

typedef struct treeNode {
    int key;
    struct treeNode *left;
    struct treeNode *right;
} tree;

typedef struct {
    tree **array;
    int n;
    int head;
    int tail;
} queue;


void enqueue(queue *, tree *);

tree *dequeue(queue *);

queue *initQueue(int size);

int isEmpty(queue *);

int isFull(queue *);

void freeQueue(queue **);

tree *buildTree(tree *, int);

tree *createNode(int);

void levelOrder(tree *);

void inorder(tree *);

void postorder(tree *);

void preorder(tree *);

double sum = 0;

void read_set(int, char *, double **);

double sumKeysOnLevel(tree *, int , int );


int main() {
    int col = 20;
    char fname[256] = "set_5.txt";

    //Реалізувати функцію зчитування вузлів дерева з файла

    double **data;
    data = (double **) malloc(col * sizeof(double *));
    for (int i = 0; i < col; ++i) {
        data[i] = (double *) malloc(col * sizeof(double));
    }

    read_set(col, fname, data);

    tree *root = NULL;
    double array[col];

    for (int i = 0; i < col; ++i) {
        array[i] = *data[i];
    }

    for (int i = 0; i < col; i++) { root = buildTree(root, array[i]); }
    printf("\nPreorder:\n");
    preorder(root);
    printf("\nInorder:\n");
    inorder(root);
    printf("\nPostorder:\n");
    postorder(root);
    printf("\nLevelorder:\n");
    levelOrder(root);
    sumKeysOnLevel(root, 0,3);
    printf("\n\nSum of the third level keys: %4.0f\n",sum);

    return 0;
}

//Реалізувати функцію зчитування вузлів дерева з файла

void read_set(int col, char *filename, double **data) {
    FILE *file;
    file = fopen(filename, "r");

    int i = 0;
    char line[4098];
    while (fgets(line, 4098, file) && (i < col)) {
        char *tmp = strdup(line);

        int j = 0;
        const char *tok;

        for (tok = strtok(line, ","); tok && *tok; j++, tok = strtok(NULL, ",")) {
            *data[j] = atof(tok);
            //printf("%.0f\t", *data[j]);
        }
        printf("\n");

        free(tmp);
        i++;
    }
    printf("Program successfully read %d elements from file %s\n", col, filename);
}


tree *buildTree(tree *root, int key) {
    if (root == NULL) { root = createNode(key); }
    else {
        if (key < root->key) {
            root->left = buildTree(root->left, key);
        } else { root->right = buildTree(root->right, key); }
    }
    return root;
}

tree *createNode(int key) {
    tree *new = (tree *) malloc(sizeof(tree));
    assert(new != NULL);
    new->left = NULL;
    new->right = NULL;
    new->key = key;
    return new;
}


// Реалізувати друк ключів вузлів дерева використовуючи симетричний обхід

void inorder(tree *root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%4d", root->key);
        inorder(root->right);
    }
}

// Реалізувати друк ключів вузлів дерева використовуючи зворотній обхід

void postorder(tree *root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%4d", root->key);
    }
}

// Реалізувати друк ключів вузлів дерева використовуючи прямий обхід

void preorder(tree *root) {
    if (root != NULL) {
        printf("%4d", root->key);
        preorder(root->left);
        preorder(root->right);
    }
}

//Обчислити суму ключів вузлів третього рівня дерева

double sumKeysOnLevel(tree *root, int level, int expectedLevel) {
    if (root != NULL && level == expectedLevel) {
        sum = sum + root->key;
    } else if (root != NULL && level < expectedLevel) {
        sumKeysOnLevel(root->left, level + 1, expectedLevel);
        sumKeysOnLevel(root->right, level + 1, expectedLevel);
    }
    return 0;
}

// Реалізувати друк ключів вузлів дерева використовуючи обхід по рівнях

void levelOrder(tree *root) {
    queue *q = initQueue(N);
    assert(root != NULL);
    enqueue(q, root);
    while (isEmpty(q) == 0) {
        tree *node = dequeue(q);
        printf("%4d", node->key);
        if (node->left != NULL) enqueue(q, node->left);
        if (node->right != NULL) enqueue(q, node->right);
    }
    freeQueue(&q);
    assert(q == NULL);
}

void freeQueue(queue **q) {
    free((*q)->array);
    free(*q);
    *q = NULL;
}


queue *initQueue(int size) {
    queue *newQueue = (queue *) malloc(sizeof(queue));
    assert(newQueue != NULL);
    newQueue->n = size;
    newQueue->head = 0;
    newQueue->tail = 0;
    newQueue->array = (tree **) malloc(sizeof(tree *) * newQueue->n);
    assert(newQueue->array != NULL);
    return newQueue;
}


int isFull(queue *q) {
    if (q->tail == q->n - 1 && q->head == 0) return 1;
    if (q->tail + 1 == q->head) return 1;
    return 0;
}

int isEmpty(queue *q) {
    if (q->tail == q->head) return 1;
    return 0;
}


void enqueue(queue *q, tree *node) {
    if (isFull(q) == 1) exit(2);
    else {
        (q->array)[q->tail] = node;
        if (q->tail == q->n - 1) { q->tail = 0; } else { q->tail = q->tail + 1; }
    }
}


tree *dequeue(queue *q) {
    tree *result;
    if (isEmpty(q) == 1) exit(3);
    result = (q->array)[q->head];
    if (q->head == q->n - 1) { q->head = 0; } else { q->head = q->head + 1; }
    return result;
}
